version: "3"
services:
  api:
    build: .
    container_name: expiresin_backend
    restart: always
    working_dir: /app
    volumes:
      - .:/app
    command: sh -c "pip install -r requirements.txt && alembic upgrade head && uvicorn src.main:app --host 0.0.0.0 --port 8000"
    ports:
      - "${BACKEND_PORT}:8000"
    depends_on:
      - postgres
      - minio
      - createbuckets

  postgres:
    image: postgres:15
    container_name: expiresin_postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT_EXTERNAL}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  minio:
    image: minio/minio
    container_name: expiresin_minio
    restart: always
    command: server /data --console-address ":9001"
    ports:
      - "${STORAGE_PORT_EXTERNAL}:9000"
      - "${STORAGE_CONSOLE_PORT_EXTERNAL}:9001"
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY}
    volumes:
      - minio_data:/var/lib/minio/data

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      sh -c "
      until mc alias set myminio http://minio:9000 ${STORAGE_ACCESS_KEY} ${STORAGE_SECRET_KEY}; do
        sleep 2;
      done &&
      mc mb myminio/expiresin || true
      "

volumes:
  postgres_data:
  minio_data:
